Перед установкой изменить пути к

/home/optimus/vendor/atoload.php
/home/optimus/vendor/mobicms/captcha/src/Captcha.php


В скриптах: functions.php, filters.php, mail.php

###################################################

Структура:

1) Отображение
  1. index.php: главная страница сайта
  2. reg-auth.php: страница авторизации и регистрации
  3. birthdays.php: табица именинников
  4. cabinet.php: личный кабинет пользователя
  5. email_verification.php: страница, на которую попадает пользователь, перейдя по ссылке при регистрации
  6. confidentiality.php: политика конфидениальности
  7. show.php: скрипт, к котрому обращется js скрипт, для показа пересчитанных дат. Содержит только вызов ф-ии из count.php
  

2) Логика
 2.1) PHP-скрипты
  1. logout.php: скрипт выхода из учетной записи пользователя
  2. auth.php: процедура авторизации пользователя на сайте
  3. reg.php: процедура регистрации пользователя на сайте
  4. email_forgot: функция сброса пароля
  5. pas_change: процедура смены пароя в личном кабинете
  6. count.php: функция пересчета дат уведомлений после интерактивного изменения селектов пользователем
  7. show.php: скрипт, к котрому обращется js скрипт, для показа пересчитанных дат. Содержит только вызов ф-ии из count.php
  8. crypt.php: функции шифрования и дешифрования
   * функции шифрования encryptName() и дешифрования decryptName() имён именинников. 
   * Первая вызывается при записи именинника.
   * Вторая вызывается при отображении в таблице birthdays
  9. filters.php: функции очистки пользовательского ввода и функци капчи
   * cleanTxt(), cleanEmail(), checkLength(), captchaCalc().  

  10. functions.php: функции, относящиеся к именинам
  
    а) function emailGreeting()  - Функция e-mail привествия зарегистрировавшихся пользователей.
     * Описание функции.
     * При помощи Swiftmailer и Yandex SMTP отправляет письмо по указанному адресу.
     * Вызывается в reg.php после рег-ии. Использует переменные $email, $login, в которых введенные пользователем контакты
     
   б) function findBirth()  - Функция сравнения введенной ДР с харнящийся в базе
    * Описание функции.
    * В БД в столбце Birthday ищет совпадение с введенной пользователем (метод POST)
    * Если нашел, в переменную  $found_user записывает лолин пользователя, у которого сохранена эта дата,
    * в переменные $found_select1-3 записывает селекты (за сколько дней выслать напоминание), сохраненные этим пользователем
    * Найденный логин сопоставляет с именем из таблицы users, в который содержится его e-mail
    * Если нашел совпадение логинов в 2 таблицах (что ествественно), записывает в перем. $found_email email юзера, записавшего этого именника
    * На этот e-mail Функция оповещения о ДР emailReminder() высылает напомианания. Это происходит, если
    * выполняется условие совпадения $currenttime с одной из дат - birthday, day_remind1, day_remind2, day_remind3.
    * Составляется переменная $text для каждого из этих 4 случаев. Она содержит текст напоминания пользователю. При этом в поле "..через Х дней
    * будет день рождения У.." вместо Х ставится значение поля select1 из БД - value['select1'].
    * Т.е. оно хранится для отобраения пользователю, а дата $value['day_remind1'] хранится для внутренних целей скрипта (для сравнения с текущей
    * датой, следовательно дл генерации сообщения).
  
  в) function randomCode() - Функция генерации пароля при восст. доступа
    
   
  11. DR_class.php
    class DR_сlass содержит 5 методов, составляющих ядро сервиса. 
  // Класс создан для того, чтобы переменные $day_remind1-3 из ф-ии countDays были доступны в ф-ии addImen

       а. public function CountDays()  - Функция (метод) вычисления за сколько дней до ДР отправить уведомление
         * Описание функции.
         * Пользователь выбирает день рожения и жмет Готово!
         * Вычисляется разница между датой рождения и временем на сервере.
         * Нужно выбрать из select кол-во дней, за сколько до даты рождения выслать оповещение.
         * Т.е. д.р - 5 дней = дата оповещения.

      б. public function addImen()  - Функция (метод) добавления именника в БД
      
      в. public function deleteImen() - Функция (метод) удаления именинника из БД
      
      г. public function countDaysNewData() - Функция (метод) рассчета уведомлений, если пользователь меняет селекты
      
      д. public function showImen() - Функция (метод) показа таблицы именинников
      Засчет AJAX и Jquery реализована возможность пользователею править дни, за сколько до ДР высылать оповещения без перезагрузки страницы.
      
  
 
  12. mail.php: одна почтовая функция оповещения о ДР.
    * function emailReminder()  - Функция оповещения о ДР. 
    * Осуществляет отправку E-mail по контактным данным, которые извлекаются из БД
    * функцией findBirth().
    Скрипт mail.php запускается Cron'ом каждый день в 6:00 АМ.

  13. dbconnect.php: процедура подключения к БД.
  
  14. delete.php 
  * public function DeleteImen() - Функция удаления именника из БД (AJAX, Jquery - без перезагрузки стр. с таблицей)

  2.2) Java-скрипты:
    1. delete.js - удаляет именника из таблицы без перезагрузки стран
    2. edit_cell.js - позволяет изменять значения select1-3 в ячейках таблицы (! добавить пересчет дат в соседнем столбце)
    3. jquery-3.0.0.js - библиотека jquery версии 3.0.0., без нее не работает удаление именинника
    4. modern.js - скрипт Modernizr 2.0.6 (Custom Build) | MIT & BSD, нужен для одного из эффектов в слайдшоу
  
3) Сторонние библиотеки /vendor:
  1. Capthca https://github.com/batumibiz/captcha
  Установка: composer require mobicms/captcha
  Путь после установки: /vendor/mobicms
  Подклоючение: require_once '/where_its_located/vendor/mobicms/captcha/src/Captcha.php';
  
  2. Swiftmailer https://github.com/swiftmailer/swiftmailer
  Установка: composer
  Путь после установки: /vendor/swiftmailer
  Подклоючение: require_once '/where_its_located/vendor/autoload.php';
